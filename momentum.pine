// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Ols87

//@version=5

indicator('Momentum')
// ZONES
int bull_level = 75
int bear_level = 25
color bull_color = color.red
color bear_color = color.green
hline(100, color = color.new(bull_color, 0), linestyle = hline.style_solid)
hline(bull_level, color = color.new(bull_color, 60), linestyle = hline.style_dashed)
hline(50, color=color.new(color.white, 70))
hline(bear_level, color = color.new(bear_color, 60), linestyle = hline.style_dashed)
hline(0, color = color.new(bear_color, 0), linestyle = hline.style_solid)
// RSI
series float rsi = ta.rsi(close, 7)
// STOCH
series float stoch = ta.sma(ta.stoch(close, high, low, 13), 3)
//plot(stoch, color=#0daeee)
// WAVES
series float waves_high_low_close_3 = hlc3 
series float waves_ema = ta.ema(waves_high_low_close_3, 13)
series float waves_dma = ta.ema(math.abs(waves_high_low_close_3 - waves_ema), 13)
float ci = (waves_high_low_close_3 - waves_ema) / (0.015 * waves_dma)
series float waves = ta.ema(ci / 1.75, 21)  + 45
//plot(waves, color=color.rgb(231, 15, 105))
// DI
float di_range = math.max(math.max(high-low, math.abs(high-nz(close[1]))), math.abs(low-nz(close[1])))
float di_plus_range = high-nz(high[1]) > nz(low[1])-low ? math.max(high-nz(high[1]), 0): 0
float di_minus_range = nz(low[1])-low > high-nz(high[1]) ? math.max(nz(low[1])-low, 0): 0
float smoothed_di_range = 0.0
smoothed_di_range := nz(smoothed_di_range[1]) - (nz(smoothed_di_range[1]) / 7) + di_range
float smoothed_di_plus = 0.0
smoothed_di_plus := nz(smoothed_di_plus[1]) - (nz(smoothed_di_plus[1]) / 7) + di_plus_range
float smoothed_di_minus = 0.0
smoothed_di_minus := nz(smoothed_di_minus[1]) - (nz(smoothed_di_minus[1]) / 7) + di_minus_range
float di_plus = smoothed_di_plus / smoothed_di_range * 144
float di_minus = -(smoothed_di_minus / smoothed_di_range * 144) + 90
float di = di_plus + ((di_minus - di_plus) / 2) * 1.1
// PMARP
var pmar_array = array.new<float>(377, na)
f_pmar (float _price, simple int _len) =>
    float ma = ta.ema (_price, _len) 
    float pmar = _price / ma 
f_pmarp (simple int _pmarp_len, float _pmar) => 
    array.unshift (pmar_array, _pmar)
    if array.size (pmar_array) > _pmarp_len + 1
        array.pop (pmar_array)
    float percentile = array.percentrank (pmar_array, 0)
float pmar = f_pmar (close, 20)
float pmarp = f_pmarp (377, pmar)
//plot(pmarp, color=color.rgb(231, 15, 105))
// VOLUME
series float typical = hlc3
float inter = math.log(typical) - math.log(typical[1])
series float vinter = ta.stdev(inter, 21)
float cutoff = 0.21 * vinter * close
series float vave = ta.sma(volume, 144)[1]
float vmax = vave * 2.1
float vc = volume < vmax ?  volume : vmax
float mf = typical - typical[1]
float vcp = mf > cutoff ? vc : (mf < -cutoff ? -vc : 0)
float vfi = (math.sum(vcp , 144) / vave) + 55
// BBWP
f_bbwp (_price, _bbwLen, _bbwpLen) =>
    float _basis = ta.ema (_price, _bbwLen)
    float _dev = ta.stdev (_price, _bbwLen)
    _bbw = (_basis + _dev - (_basis - _dev)) / _basis
    _bbwSum = 0.0
    _len = bar_index < _bbwpLen ? bar_index : _bbwpLen
    for _i = 1 to _len by 1
        _bbwSum += (_bbw[_i] > _bbw ? 0 : 1)
        _bbwSum
    _return = bar_index >= _bbwLen ? (_bbwSum / _len) * 100 : na
    _return
bbwp = f_bbwp (close, 22, 233)
bbwp_ma = ta.ema (bbwp, 5)
// VOLATILITY
float volatility = (bbwp_ma / 2) * 2
if volatility > 100 
    volatility:= 100
float volatility_ratio = volatility / 2
volatility_upper = plot(volatility_ratio + 50, 'BBWP', color.new(color.orange, 100), style=plot.style_stepline)
volatility_mid = plot(50, color= color.new(color.black, 100))
volatility_lower = plot(100 - (volatility_ratio + 50), 'BBWP', color.new(color.orange, 100))
fill(volatility_upper, volatility_mid, color.new(color.white, 80))
fill(volatility_lower, volatility_mid, color.new(color.white, 80))
// MOMENTUM
float momentum = (((stoch + rsi + waves + di + pmarp + vfi) / 6) * 1.1) -5
series float momentum_ma = ta.ema((momentum * 1.1) - 5 , 5)

plot(momentum, color = color.white)
plot(momentum_ma, color = color.yellow)

lbR = 5
lbL = 5
rangeUpper = 144
rangeLower = 5

_inRange(cond) =>
    bars = ta.barssince(cond == true)
    rangeLower <= bars and bars <= rangeUpper

plFound = na(ta.pivotlow(momentum, lbL, lbR)) ? false : true
phFound = na(ta.pivothigh(momentum, lbL, lbR)) ? false : true
momentumHL = momentum[lbR] > ta.valuewhen(plFound, momentum[lbR], 1) and _inRange(plFound[1])
momentumLL = momentum[lbR] < ta.valuewhen(plFound, momentum[lbR], 1) and _inRange(plFound[1])
momentumHH = momentum[lbR] > ta.valuewhen(phFound, momentum[lbR], 1) and _inRange(phFound[1])
momentumLH = momentum[lbR] < ta.valuewhen(phFound, momentum[lbR], 1) and _inRange(phFound[1])
priceLL = low[lbR] < ta.valuewhen(plFound, low[lbR], 1)
priceHL = low[lbR] > ta.valuewhen(plFound, low[lbR], 1)
priceHH = high[lbR] > ta.valuewhen(phFound, high[lbR], 1)
priceLH = high[lbR] < ta.valuewhen(phFound, high[lbR], 1)
bullCond =  priceLL and momentumHL and plFound
hiddenBullCond = priceHL and momentumLL and plFound
bearCond = priceHH and momentumLH and phFound
hiddenBearCond = priceLH and momentumHH and phFound

bearColor = color.red
bullColor = color.green
hiddenBullColor = color.rgb(26, 214, 158)
hiddenBearColor = color.rgb(238, 123, 29)
noneColor = color.new(color.white, 100)

plot(plFound ? momentum[lbR] : na, offset = -lbR, color = bullCond ? bullColor : noneColor)
plot(plFound ? momentum[lbR] : na, offset = -lbR, color = hiddenBullCond ? hiddenBullColor : noneColor)
plot(phFound ? momentum[lbR] : na, offset = -lbR, color = bearCond ? bearColor : noneColor)
plot(phFound ? momentum[lbR] : na, offset = -lbR, color = hiddenBearCond ? hiddenBearColor : noneColor)
